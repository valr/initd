# This file is part of initsystem
#
# Copyright (C) 2014-2017 ValÃ¨re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

pwait() {
  for i in $(seq $2); do
    pgrep -fx "$1" 1>/dev/null 2>/dev/null

    if [ $? -ne 0 ]; then
      return 0
    fi

    sleep .25
  done

  return 1
}

pidwait() {
  for i in $(seq $2); do
    STATUS=0

    for PID in $1; do
      kill -CONT $PID 1>/dev/null 2>/dev/null && STATUS=1
    done

    if [ $STATUS -eq 0 ]; then
      return 0
    fi

    sleep .25
  done

  return 1
}

pidwait5() {
  for i in $(seq $1); do
    killall5 -CONT 1>/dev/null 2>/dev/null

    if [ $? -eq 2 ]; then
      return 0
    fi

    sleep .25
  done

  return 1
}

pidfile() {
  [ -e "$1" ] || return 1
  [ -f "$1" ] || { echo "the pid file is not a regular file"; exit 1; }
  [ -r "$1" ] || { echo "the pid file is not readable"; exit 1; }

  PID=0; read -r PID 2>/dev/null < "$1"
  CMD=$(strings /proc/$PID/cmdline 2>/dev/null | head -n 1)

  [ "x$CMD" = "x$2" ] || return 1

  echo $PID
  return 0
}

# /etc/rc, /etc/rc.respawn, /etc/rc.shutdown will stop here

[ $PPID = 1 ] && return 0

# script for services

eval rc_new_cmd="\${$(basename "$0" | tr '-' '_')_cmd}"
eval rc_new_stop_cmd="\${$(basename "$0" | tr '-' '_')_stop_cmd}"
eval rc_new_reload_cmd="\${$(basename "$0" | tr '-' '_')_reload_cmd}"

[ "${rc_new_cmd}" ] && rc_cmd="${rc_new_cmd}"
[ "${rc_new_stop_cmd}" ] && rc_stop_cmd="${rc_new_stop_cmd}"
[ "${rc_new_reload_cmd}" ] && rc_reload_cmd="${rc_new_reload_cmd}"

[ "${rc_stop_cmd}" ] || rc_stop_cmd="pkill -TERM -fx \"${rc_cmd}\""
[ "${rc_reload_cmd}" ] || rc_reload_cmd="pkill -HUP -fx \"${rc_cmd}\""

rc_check_started() {
  pgrep -fx "${rc_cmd}" 1>/dev/null 2>/dev/null
}

rc_check_stopped() {
  pwait "${rc_cmd}" 20
}

rc_start() {
  ash -c "${rc_env} ${rc_cmd}"
}

rc_stop() {
  ash -c "${rc_stop_env} ${rc_stop_cmd}"
}

rc_reload() {
  ash -c "${rc_reload_env} ${rc_reload_cmd}"
}

rc_status() {
  PID=$(pgrep -fx "${rc_cmd}" 2>/dev/null | tr '\n' ' ')
  if [ "$PID" ]; then
    echo "$(basename "$0") is started as pid: $PID"; return 0
  else
    echo "$(basename "$0") is stopped"; return 1
  fi
}

start() {
  rc_check_started && return 0
  rc_start
}

stop() {
  rc_check_started || return 0
  rc_stop
  rc_check_stopped
}

restart() {
  stop
  start
}

reload() {
  rc_check_started || return 1
  rc_reload
}

status() {
  rc_status
}

rc_run() {
  export PATH=/opt/busybox
  export LC_ALL=C
  cd / ; umask 022

  for CMD in $1; do
    if [ "x$CMD" = "x$2" ]; then
      "$2"; STATUS=$?

      [ "$2" != "status" ] && [ $STATUS -ne 0 ] && \
        echo "$(basename "$0") failed"

      return $STATUS
    fi
  done

  echo "usage: $(basename "$0") {${1// /|}}"
  return 1
}

# vim: set filetype=sh:
