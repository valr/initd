# This file is part of initsystem
#
# Copyright (C) 2014 ValÃ¨re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

RC_NAME=""
RC_COMMAND=""
RC_COMMAND_OPTIONS=""
RC_COMMAND_ENVIRONMENT=""
RC_PID=""

COLOR_NORMAL=`tput setaf 1`
COLOR_RED=`tput sgr0`

do_start() {
  printf "starting %s " "${RC_NAME}"

  if pgrep -n -x "${RC_COMMAND}" 1>/dev/null 2>/dev/null; then
    printf "=> ${COLOR_RED}failed (already running)${COLOR_NORMAL}\n"
    return 1
  fi

  if [ ! -z "${RC_PID}" ]; then
    rm -f "${RC_PID}"
  fi

  if [ $# -eq 1 ] && type "$1" 1>/dev/null 2>/dev/null; then
    eval "$1"
  else
    eval "${RC_COMMAND_ENVIRONMENT}" "${RC_COMMAND}" "${RC_COMMAND_OPTIONS}"
  fi

  if [ $? -ne 0 ]; then
    printf "=> ${COLOR_RED}failed${COLOR_NORMAL}\n"
    return 1
  else
    printf "=> done\n"
    return 0
  fi
}

do_stop() {
  printf "stopping %s " "${RC_NAME}"

  if ! pgrep -n -x "${RC_COMMAND}" 1>/dev/null 2>/dev/null; then
    printf "=> ${COLOR_RED}failed (not running)${COLOR_NORMAL}\n"
    return 1
  fi

  if [ $# -eq 1 ] && type "$1" 1>/dev/null 2>/dev/null; then
    eval "$1"
  else
    pkill -TERM -x "${RC_COMMAND}"
    pkill -CONT -x "${RC_COMMAND}"

    do_wait "${RC_COMMAND}" 20
  fi

  if [ $? -ne 0 ]; then
    printf "=> ${COLOR_RED}failed${COLOR_NORMAL}\n"
    return 1
  fi

  if [ ! -z "${RC_PID}" ]; then
    rm -f "${RC_PID}"
  fi

  printf "=> done\n"
  return 0
}

do_reload() {
  printf "reloading %s " "${RC_NAME}"

  if ! pgrep -n -x "${RC_COMMAND}" 1>/dev/null 2>/dev/null; then
    printf "=> ${COLOR_RED}failed (not running)${COLOR_NORMAL}\n"
    return 1
  fi

  if [ $# -eq 1 ] && type "$1" 1>/dev/null 2>/dev/null; then
    eval "$1"
  else
    pkill -HUP -x "${RC_COMMAND}"
  fi

  if [ $? -ne 0 ]; then
    printf "=> ${COLOR_RED}failed${COLOR_NORMAL}\n"
    return 1
  else
    printf "=> done\n"
    return 0
  fi
}

do_status() {
  PID=""

  for PID in `pgrep -x "${RC_COMMAND}"`; do
    printf "%s is running as pid %d\n" "${RC_COMMAND}" "${PID}"
  done

  if [ -z "${PID}" ]; then
    printf "%s is not running\n" "${RC_COMMAND}"
  fi

  return 0
}

do_wait() {
  if [ $# -ne 2 ]; then
    return 2
  fi

  for i in `seq $2`; do
    if ! pgrep -n -x "$1" 1>/dev/null 2>/dev/null; then
      return 0
    fi

    sleep .25
  done

  return 1
}

do_run() {
  if [ $# -ne 2 ]; then
    return 2
  fi

  printf "$1"
  eval "$2"

  if [ $? -ne 0 ]; then
    printf "=> ${COLOR_RED}failed${COLOR_NORMAL}\n"
    return 1
  else
    printf "=> done\n"
    return 0
  fi
}
