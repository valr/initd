#!/bin/ash

# This file is part of initsystem
#
# Copyright (C) 2014-2016 ValÃ¨re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

PATH=/opt/busybox
LC_ALL=C

export PATH LC_ALL

cd /
umask 022

################################################################################
# sanity check #################################################################
################################################################################

if [ $(id -u) != 0 ]; then
  echo "error: this script should be run as root"
  exit 1
fi

################################################################################
# parameters ###################################################################
################################################################################

INCLUDE=""; EXCLUDE=""; REMOVE=""

while [ $# -gt 0 ]; do
  case "$1" in
    --prefix=*)         INCLUDE="${1#--prefix=}" ;;
    --exclude-prefix=*) EXCLUDE="${1#--exclude-prefix=}" ;;
    --remove)           REMOVE="true" ;;
  esac

  shift
done

################################################################################
# functions ####################################################################
################################################################################

set_default_permissions_file() {
  [ -z "${MOD}" ] && MOD="0644"
  [ -z "${UID}" ] && UID="root"
  [ -z "${GID}" ] && GID="root"
}

set_default_permissions_directory() {
  [ -z "${MOD}" ] && MOD="0755"
  [ -z "${UID}" ] && UID="root"
  [ -z "${GID}" ] && GID="root"
}

set_permissions() {
  [ "${MOD}" ] && chmod "${MOD}" "${PTH}"
  [ "${UID}" ] && chown "${UID}" "${PTH}"
  [ "${GID}" ] && chown :"${GID}" "${PTH}"
}

set_permissions_recursively() {
  [ "${MOD}" ] && chmod -R "${MOD}" "${PTH}"
  [ "${UID}" ] && chown -R "${UID}" "${PTH}"
  [ "${GID}" ] && chown -R :"${GID}" "${PTH}"
}

################################################################################
# process tmpfiles #############################################################
################################################################################

DIR1="/usr/lib/tmpfiles.d"
DIR2="/etc/tmpfiles.d"

for FILE in $(find "${DIR1}" "${DIR2}" -name '*.conf' -exec basename '{}' \; 2> /dev/null | sort -u); do

  [ -r "${DIR1}/${FILE}" ] && IFILE="${DIR1}/${FILE}"
  [ -r "${DIR2}/${FILE}" ] && IFILE="${DIR2}/${FILE}"

  grep -v '^[[:blank:]]*#' "${IFILE}" | while read LINE; do

    TYP=""; PTH=""; MOD=""; UID=""; GID=""; AGE=""; ARG=""

    for FIELD in $(echo "${LINE}" | \
      awk -F '"' -v OFS='' '{ for (i=2; i<=NF; i+=2) gsub(" ", "\\x20", $i) } 1'); do

      FIELD=$(echo -e "${FIELD}")

      [ -z "${TYP}" ] && TYP="${FIELD}" && continue
      [ -z "${PTH}" ] && PTH="${FIELD}" && continue
      [ -z "${MOD}" ] && MOD="${FIELD}" && continue
      [ -z "${UID}" ] && UID="${FIELD}" && continue
      [ -z "${GID}" ] && GID="${FIELD}" && continue
      [ -z "${AGE}" ] && AGE="${FIELD}" && continue
      [ -z "${ARG}" ] && ARG="${FIELD}" && continue
    done

    [ "${MOD}" = "-" ] && MOD=""
    [ "${UID}" = "-" ] && UID=""
    [ "${GID}" = "-" ] && GID=""
    [ "${AGE}" = "-" ] && AGE=""
    [ "${ARG}" = "-" ] && ARG=""

    # skip when no type or path
    [ -z "${TYP}" ] && continue
    [ -z "${PTH}" ] && continue

    # skip included/excluded paths
    [ "${INCLUDE}" ] && [ "${PTH##${INCLUDE}*}" ] && continue
    [ "${EXCLUDE}" ] && [ ! "${PTH##${EXCLUDE}*}" ] && continue

    # skip paths with a percent sign
    [ $(echo "${PTH}" | grep '%') ] && continue

    # remove trailing ! from type
    [ $(echo "${TYP}" | grep '!$') ] && TYP="${TYP%?}"

    # remove leading ~ from mode
    [ $(echo "${MOD}" | grep '^~') ] && MOD="${MOD#~}"

    case "${TYP}" in

      "f")
        if [ ! -e "${PTH}" ]; then
          > "${PTH}"; [ "${ARG}" ] && echo "${ARG}" > "${PTH}"
          set_default_permissions_file
          set_permissions
        fi
        ;;

      "F")
        > "${PTH}"; [ "${ARG}" ] && echo "${ARG}" > "${PTH}"
        set_default_permissions_file
        set_permissions
        ;;

      "w")
        if [ -e "${PTH}" ]; then
          echo -n -e "${ARG}" > "${PTH}"
        fi
        ;;

      "d"|"v"|"q"|"Q")
        if [ ! -e "${PTH}" ]; then
          mkdir -p "${PTH}"
          set_default_permissions_directory
        fi
        set_permissions
        ;;

      "D")
        if [ ! -e "${PTH}" ]; then
          mkdir -p "${PTH}"
          set_default_permissions_directory
        fi
        set_permissions

        if [ "${REMOVE}" ]; then
          find "${PTH}" -mindepth 1 -maxdepth 1 -xdev -print0 | xargs -r0 rm -rf
        fi
        ;;

      "e")
        if [ -e "${PTH}" ]; then
          set_permissions
        fi
        ;;

      "p")
        if [ ! -e "${PTH}" ]; then
          set_default_permissions_file
          mkfifo -m "${MOD}" "${PTH}"
          chown "${UID}:${GID}" "${PTH}"
        fi
        ;;

      "p+")
        rm -f "${PTH}"
        set_default_permissions_file
        mkfifo -m "${MOD}" "${PTH}"
        chown "${UID}:${GID}" "${PTH}"
        ;;

      "L")
        if [ ! -e "${PTH}" ]; then
          ln -s "${ARG}" "${PTH}"
        fi
        ;;

      "L+")
        rm -f "${PTH}"
        ln -s "${ARG}" "${PTH}"
        ;;

      "c")
        MAJOR=$(echo "${ARG}" | cut -d ':' -f 1)
        MINOR=$(echo "${ARG}" | cut -d ':' -f 2)

        if [ ! -e "${PTH}" ]; then
          set_default_permissions_file
          mknod -m "${MOD}" "${PTH}" c "${MAJOR}" "${MINOR}"
          chown "${UID}:${GID}" "${PTH}"
        fi
        ;;

      "c+")
        MAJOR=$(echo "${ARG}" | cut -d ':' -f 1)
        MINOR=$(echo "${ARG}" | cut -d ':' -f 2)

        rm -f "${PTH}"
        set_default_permissions_file
        mknod -m "${MOD}" "${PTH}" c "${MAJOR}" "${MINOR}"
        chown "${UID}:${GID}" "${PTH}"
        ;;

      "b")
        MAJOR=$(echo "${ARG}" | cut -d ':' -f 1)
        MINOR=$(echo "${ARG}" | cut -d ':' -f 2)

        if [ ! -e "${PTH}" ]; then
          set_default_permissions_file
          mknod -m "${MOD}" "${PTH}" b "${MAJOR}" "${MINOR}"
          chown "${UID}:${GID}" "${PTH}"
        fi
        ;;

      "b+")
        MAJOR=$(echo "${ARG}" | cut -d ':' -f 1)
        MINOR=$(echo "${ARG}" | cut -d ':' -f 2)

        rm -f "${PTH}"
        set_default_permissions_file
        mknod -m "${MOD}" "${PTH}" b "${MAJOR}" "${MINOR}"
        chown "${UID}:${GID}" "${PTH}"
        ;;

      "C")
        if [ -e "${ARG}" ] && [ ! -e "${PTH}" ]; then
          cp -R "${ARG}" "${PTH}"
        fi
        ;;

      "x"|"X")
        ;;

      "r")
        if [ -d "${PTH}" ]; then
          rmdir "${PTH}"
        else
          rm -f "${PTH}"
        fi
        ;;

      "R")
        rm -rf "${PTH}"
        ;;

      "z")
        if [ -e "${PTH}" ]; then
          set_permissions
        fi
        ;;

      "Z")
        if [ -e "${PTH}" ]; then
          set_permissions_recursively
        fi
        ;;

      # "t"|"T")
      # ;;

      "h") chattr "${ARG}" "${PTH}" ;;
      "H") chattr -R "${ARG}" "${PTH}" ;;

      # "a"|"a+"|"A"|"A+")
      # ;;

      *)
        echo "error: unknown type ${TYP} for '${LINE}'"
        ;;

    esac
  done
done

# vim: set filetype=sh: