#!/bin/ash

# This file is part of initsystem
#
# Copyright (C) 2014 Val√®re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

PATH=/sbin:/bin
export PATH

cd /
umask 022

################################################################################
# sanity check #################################################################
################################################################################

if [ $$ != 1 ]; then
  echo "initramfs: this script should be pid 1"
  exit 1
fi

################################################################################
# functions ####################################################################
################################################################################

reboot_system() {
  echo "initramfs: rebooting in 7 seconds"

  killall5 -TERM; sleep 4
  killall5 -KILL; sleep 3

  umount -a -r
  reboot -f
}

rescue_shell() {
  echo "initramfs: loading keymap"

  if [ -f /etc/keymap ]; then
    loadkmap < /etc/keymap
  fi

  echo "initramfs: dropping to rescue shell"
  echo "initramfs: 'setsid cttyhack sh' to get a controlling terminal"

  sulogin /dev/console
  reboot_system
}

################################################################################
# in-memory filesystems ########################################################
################################################################################

echo "initramfs: mounting in-memory filesystems"

mount -t proc -o nosuid,nodev,noexec proc /proc
mount -t sysfs -o nosuid,nodev,noexec sys /sys
mount -t tmpfs -o nosuid,nodev,mode=0755 run /run
mount -t devtmpfs -o nosuid,mode=0755 dev /dev
mkdir -p /dev/pts
mount -t devpts -o nosuid,noexec,gid=5,mode=0620,ptmxmode=0 pts /dev/pts
mkdir -p /dev/shm
mount -t tmpfs -o nosuid,nodev shm /dev/shm

################################################################################
# kernel command line ##########################################################
################################################################################

echo "initramfs: parsing kernel command line"

for COMMAND in `cat /proc/cmdline`; do
  case "${COMMAND}" in
    break\=*)
      BREAK="${COMMAND#break=}"
      ;;
    init\=*)
      INIT="${COMMAND#init=}"
      ;;
    root\=*)
      ROOT="${COMMAND#root=}"
      ;;
    rootfstype\=*)
      TYPE="${COMMAND#rootfstype=}"
      ;;
  esac
done

if [ "${BREAK}" = "initramfs-early" ]; then
  echo "initramfs: break on initramfs-early"
  rescue_shell
fi

if [ -z "${INIT}" ]; then
  INIT="/sbin/init"
fi

if [ -z "${ROOT}" ]; then
  echo "initramfs: missing root=the_device (e.g. /dev/sda1) on kernel command line"
  rescue_shell
fi

if [ -z "${TYPE}" ]; then
  echo "initramfs: missing rootfstype=the_filesystem_type (e.g. ext4) on kernel command line"
  rescue_shell
fi

################################################################################
# hardware clock ###############################################################
################################################################################

echo "initramfs: setting clock"

hwclock -t -u

################################################################################
# modules ######################################################################
################################################################################

echo "initramfs: loading modules"

if [ -f /etc/modules ]; then
  while IFS= read -r MODULE; do
    modprobe "${MODULE}"
  done < /etc/modules
fi

################################################################################
# filesystems ##################################################################
################################################################################

wait_filesystem() {
  for i in `seq $2`; do
    if [ -e "$1" ]; then
      return 0
    fi

    sleep .25
  done

  return 1
}

echo "initramfs: waiting for root filesystem"

wait_filesystem "${ROOT}" 120

if [ $? -ne 0 ]; then
  echo "initramfs: timeout reached for ${ROOT}"
  rescue_shell
fi

echo "initramfs: checking root filesystem"

touch /etc/fstab
ln -s /proc/self/mounts /etc/mtab

fsck -T -t "${TYPE}" "${ROOT}"; STATUS=$?

if [ $STATUS -ne 0 ] && [ $STATUS -ne 1 ] && [ $STATUS -ne 32 ]; then
  echo "initramfs: fsck error ${STATUS} encountered on ${ROOT}"

  if [ $STATUS -eq 2 ]; then
    reboot_system
  fi

  rescue_shell
fi

echo "initramfs: mounting root filesystem read-only"

mount -r -t "${TYPE}" "${ROOT}" /newroot

if [ $? -ne 0 ]; then
  echo "initramfs: cannot mount ${ROOT} with type ${TYPE}"
  rescue_shell
fi

echo "initramfs: checking other filesystems"

cp -f /newroot/etc/fstab /etc/fstab

fsck -T -A -R; STATUS=$?

if [ $STATUS -ne 0 ] && [ $STATUS -ne 1 ] && [ $STATUS -ne 32 ]; then
  echo "initramfs: fsck error ${STATUS} encountered"

  if [ $STATUS -eq 2 ]; then
    reboot_system
  fi

  rescue_shell
fi

################################################################################
# init #########################################################################
################################################################################

echo "initramfs: checking init"

if [ ! -x /newroot/"${INIT}" ]; then
  echo "initramfs: init program ${INIT} doesn't exist or is not executable"
  rescue_shell
fi

if [ "${BREAK}" = "initramfs-late" ]; then
  echo "initramfs: break on initramfs-late"
  rescue_shell
fi

################################################################################
# in-memory filesystems ########################################################
################################################################################

echo "initramfs: unmounting in-memory filesystems"

umount /dev/shm
umount /dev/pts
umount /dev
umount /run
umount /sys
umount /proc

################################################################################
# swiching root ################################################################
################################################################################

echo "initramfs: switching root filesystem"

exec env -i /bin/switch_root /newroot "${INIT}"

echo "initramfs: cannot switch to /newroot and execute ${INIT}"

rescue_shell
