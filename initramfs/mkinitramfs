#!/bin/ash

# This file is part of initsystem
#
# Copyright (C) 2014-2016 ValÃ¨re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Howto extract the initramfs content:
# gunzip initramfs-linux.cpio.gz
# busybox cpio -i -d -H newc -F initramfs-linux.cpio

PATH=/opt/busybox
LC_ALL=C

export PATH LC_ALL
umask 022

################################################################################
# parameters ###################################################################
################################################################################

if [ $(id -u) -ne 0 ]; then
  echo "error: this script should be run as root"
  exit 1
fi

LINUX="$1"

if [ ! -e /etc/mkinitcpio.d/"${LINUX}".preset ]; then
  echo "error: $1 is not a .preset file in /etc/mkinitcpio.d/"
  exit 1
fi

echo ">>> generating initramfs-${LINUX}.cpio.gz <<<"

################################################################################
# base directory ###############################################################
################################################################################

echo "mkinitramfs: creating temporary base directory"

BASE=$(mktemp -d /tmp/initramfs.XXXXXX)

trap 'rm -rf "${BASE}"; echo "mkinitramfs: an error has occurred, aborting!"; exit 1' INT TERM EXIT

################################################################################
# directory structure ##########################################################
################################################################################

echo "mkinitramfs: installing directory structure"

for DIRECTORY in bin dev etc etc/modprobe.d lib lib64 mnt newroot proc root \
                 run sbin sys tmp usr usr/bin usr/lib usr/lib64 usr/sbin var; do
  install -d -m755 "${BASE}/${DIRECTORY}"
done

################################################################################
# etc ##########################################################################
################################################################################

echo "mkinitramfs: installing configuration files"

echo "root:x:0:0:root:/root:/bin/sh" > "${BASE}"/etc/passwd

echo "root:x:0:root" > "${BASE}"/etc/group
echo "tty:x:5:" >> "${BASE}"/etc/group

umask 077
grep "^root:" /etc/shadow > "${BASE}"/etc/shadow
umask 022

dumpkmap > "${BASE}"/etc/keymap

install -m644 /dev/null "${BASE}"/etc/ld.so.conf
install -m644 /etc/localtime "${BASE}"/etc/localtime

################################################################################
# statically linked binaries ###################################################
################################################################################

echo "mkinitramfs: installing statically linked binaries"

install -m755 /usr/bin/busybox "${BASE}"/usr/bin/busybox
install -m4755 /usr/bin/busybox-suid "${BASE}"/usr/bin/busybox-suid

for BINARY in /usr/bin/busybox /usr/bin/busybox-suid; do
  for APPLET in $("${BASE}/${BINARY}" --list); do
    ln -s "${BINARY}" "${BASE}/bin/${APPLET}"
  done
done

################################################################################
# dynamically linked binaries ##################################################
################################################################################

echo "mkinitramfs: installing dynamically linked binaries"

add_binary() {
  if [ ! -e "${BASE}/$1" ]; then
    install -D "$1" "${BASE}/$1"
  fi

  if [ "$1" != "$2" ]; then
    if [ ! -L "${BASE}/$2" ]; then
      ln -s "$1" "${BASE}/$2"
    fi
  fi
}

add_binaries() {
  add_binary "$(readlink -f "$1")" "$1"

  for BINARY in $(/usr/bin/ldd "$1" | grep -v "linux-vdso.so.1" | awk '{print $(NF-1)}'); do
    add_binary "$(readlink -f "${BINARY}")" "${BINARY}"
  done
}

for FILESYSTEM in ext2 ext3 ext4 fat vfat msdos; do
  add_binaries /usr/bin/fsck."${FILESYSTEM}"
done

/usr/bin/ldconfig -r "${BASE}" -f /etc/ld.so.conf -C /etc/ld.so.cache

################################################################################
# modules and firmwares ########################################################
################################################################################

echo "mkinitramfs: installing kernel modules and firmwares"

add_module() {
  REGEXP=$(basename "$1" | sed 's/[-_]/[\\-_]/g')
  MODULES=$(grep "/${REGEXP}.*:" "/usr/lib/modules/${VERSION}/modules.dep")

  for MODULE in $MODULES; do
    MODULE="${MODULE%:}"
    install -D -m644 "/usr/lib/modules/${VERSION}/${MODULE}" "${BASE}/lib/modules/${VERSION}/${MODULE}"
    basename "${MODULE}" .ko.gz >> "${BASE}"/etc/modules
  done
}

add_firmware() {
  if [ ! -d "$1" ]; then
    install -D "$1" "${BASE}/$1"
  fi
}

VERSION=$(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".img | grep -m 1 "usr/lib/modules/" | awk -F / '{print $4}')

for FILE in $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".img); do
  case "${FILE}" in
    "usr/lib/modules/"*.ko) add_module "${FILE}" ;;
    "usr/lib/firmware/"*) add_firmware "${FILE#usr}" ;;
  esac
done

depmod -b "${BASE}" "${VERSION}"

for OPTION in /etc/modprobe.d/*.conf /lib/modprobe.d/*.conf; do
  install -D -m644 "${OPTION}" "${BASE}"/etc/modprobe.d
done

################################################################################
# initscript ###################################################################
################################################################################

echo "mkinitramfs: installing initscript"

install -m755 /usr/lib/initramfs/initramfs "${BASE}"/init

################################################################################
# initramfs ####################################################################
################################################################################

echo "mkinitramfs: generating initramfs archive"

cd "${BASE}"

umask 077
find . | cpio -o -H newc | gzip > /tmp/initramfs-"${LINUX}".cpio.gz
umask 022

cd ..

echo "mkinitramfs: installing initramfs archive"

install -m600 /tmp/initramfs-"${LINUX}".cpio.gz /boot/initramfs-"${LINUX}".cpio.gz

echo "mkinitramfs: cleaning temporary files"

rm -f /tmp/initramfs-"${LINUX}".cpio.gz
rm -rf "${BASE}"

echo "mkinitramfs: listing summary of initramfs archive"

echo "binaries $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".cpio.gz | grep -E '^(bin|sbin|usr/bin|usr/sbin)' | wc -l)"
echo "configs $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".cpio.gz | grep -E '^(etc)' | wc -l)"
echo "firmwares $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".cpio.gz | grep -E '^(lib/firmware)' | wc -l)"
echo "modules $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".cpio.gz | grep -E '^(lib/modules)' | wc -l)"
echo "libraries $(/usr/bin/lsinitramfs /boot/initramfs-"${LINUX}".cpio.gz | grep -E '^(lib|lib64|usr/lib|usr/lib64)' | grep -v -E '^lib/(firmware|modules)' | wc -l)"

echo ">>> generation done <<<"

trap - INT TERM EXIT
exit 0
