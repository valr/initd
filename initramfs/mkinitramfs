#!/bin/ash

# This file is part of initsystem
#
# Copyright (C) 2014-2015 ValÃ¨re Monseur (valere dot monseur at ymail dot com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Howto extract the initramfs content:
# gunzip initramfs-linux.cpio.gz
# busybox cpio -i -d -H newc -F initramfs-linux.cpio

set -e

PATH=/opt/busybox

. /etc/mkinitramfs.conf

################################################################################
# parameters ###################################################################
################################################################################

if [ `id -u` -ne 0 ]; then
  echo "error: this script should be run as root"
  exit 1
fi

if [ $# -ne 1 ]; then
  echo "error: one and only one parameter required"
  exit 1
fi

LINUX=""
for KERNEL in ${INITRAMFS_KERNEL}; do
  if [ "$1" = "${KERNEL}" ]; then
    LINUX="$1"
  fi
done

if [ -z "${LINUX}" ]; then
  echo "error: parameter $1 is not a kernel defined in /etc/mkinitramfs.conf"
  exit 1
fi

################################################################################
# base directory ###############################################################
################################################################################

echo "generating initramfs-${LINUX}.cpio.gz..."

BASE=`mktemp -d /tmp/initramfs.XXXXXX`

trap 'rm -rf "${BASE}"; echo "an error occured, stopping!"; exit 1' INT TERM EXIT

################################################################################
# directory structure ##########################################################
################################################################################

for DIR in dev etc mnt newroot proc root run sys tmp usr/bin usr/lib var; do
  install -d -m755 "${BASE}"/"${DIR}"
done

ln -s usr/bin "${BASE}"/bin
ln -s usr/bin "${BASE}"/sbin
ln -s usr/bin "${BASE}"/usr/sbin

ln -s usr/lib "${BASE}"/lib
ln -s usr/lib "${BASE}"/lib64
ln -s usr/lib "${BASE}"/usr/lib64

################################################################################
# etc ##########################################################################
################################################################################

echo "root:x:0:0:root:/root:/bin/sh" > "${BASE}"/etc/passwd

echo "root:x:0:root" > "${BASE}"/etc/group
echo "tty:x:5:" >> "${BASE}"/etc/group

umask 077
grep "^root:" /etc/shadow > "${BASE}"/etc/shadow
umask 022

dumpkmap > "${BASE}"/etc/keymap

install -D -m644 /etc/localtime "${BASE}"/etc/localtime

################################################################################
# binaries #####################################################################
################################################################################

install -D -m755 /usr/bin/busybox "${BASE}"/usr/bin/busybox
install -D -m4755 /usr/bin/busybox-suid "${BASE}"/usr/bin/busybox-suid

install -D -m755 /usr/bin/fsck.ext-static "${BASE}"/usr/bin/fsck.ext2
install -D -m755 /usr/bin/fsck.ext-static "${BASE}"/usr/bin/fsck.ext3
install -D -m755 /usr/bin/fsck.ext-static "${BASE}"/usr/bin/fsck.ext4

install -D -m755 /usr/bin/fsck.fat-static "${BASE}"/usr/bin/fsck.fat
install -D -m755 /usr/bin/fsck.fat-static "${BASE}"/usr/bin/fsck.vfat

for BINARY in /usr/bin/busybox /usr/bin/busybox-suid; do
  for APPLET in `"${BASE}"/"${BINARY}" --list`; do
    ln -s "${BINARY}" "${BASE}"/usr/bin/"${APPLET}"
  done
done

#add_binary() {
#  install -D "$1" "${BASE}"/"$1"
#  for BINARY in `/usr/bin/ldd "$1" | grep -v linux-vdso.so.1 | sed 's/.*=>//' | sed 's/(0x.*//'`; do
#    install -D "${BINARY}" "${BASE}"/"${BINARY}"
#  done
#}
#
# add_binary /usr/bin/the_binary_dynamically_linked

################################################################################
# modules ######################################################################
################################################################################

add_module() {
  # find module in package files
  MOD_NM1=`echo "$1" | tr '-' '_'`
  MOD_NM2=`echo "$1" | tr '_' '-'`

  MOD_PTH=`grep -E "(/${MOD_NM1}.ko.gz|/${MOD_NM2}.ko.gz)" "${MOD_PKG}"/files`
  MOD_NAM=`basename "${MOD_PTH}" .ko.gz`

  # module not found
  if [ -z "${MOD_PTH}" ]; then
    echo "error: module $1 not found"
    return 1
  fi

  # install module in initramfs
  install -D -m644 /"${MOD_PTH}" "${BASE}"/"${MOD_PTH}"

  if [ $# -eq 1 ]; then
    echo "${MOD_NAM}" >> "${BASE}"/etc/modules
  fi

  # find module dependencies
  DEP=`grep /"${MOD_NAM}".ko.gz: /"${MOD_DEP}" | cut -d ':' -f 2`

  for MOD in `echo "${DEP}"`; do
    # find dependency name
    MOD=`basename "${MOD}" .ko.gz`

    # recursively add every dependency
    add_module "${MOD}" "$1"
  done
}

if [ -r /etc/mkinitramfs.d/"${LINUX}".module ]; then
  # FIXME: ugly way to identify installed linux kernel
  MOD_PKG=`ls -d /var/lib/pacman/local/${LINUX}-3.*`
  MOD_DEP=`grep 'modules.dep$' "${MOD_PKG}"/files`
  MOD_VER=`echo "${MOD_DEP}" | awk -F/ '{print $(NF-1)}'`

  grep -E -v "^[[:blank:]]*(#|$)" /etc/mkinitramfs.d/"${LINUX}".module | while read MODULE; do
    add_module "${MODULE}"
  done

  depmod -b "${BASE}"/usr "${MOD_VER}"

  for MOD_OPT in /etc/modprobe.d/*; do
    if [ -e "${MOD_OPT}" ]; then
      install -D -m644 "${MOD_OPT}" "${BASE}"/"${MOD_OPT}"
    fi
  done
else
  echo "error: /etc/mkinitramfs.d/${LINUX}.module doesn't exist or is not readable"
fi

################################################################################
# firmwares ####################################################################
################################################################################

if [ -r /etc/mkinitramfs.d/"${LINUX}".firmware ]; then
  grep -E -v "^[[:blank:]]*(#|$)" /etc/mkinitramfs.d/"${LINUX}".firmware | while read FIRMWARE; do
    install -D "${FIRMWARE}" "${BASE}"/"${FIRMWARE}"
  done
else
  echo "error: /etc/mkinitramfs.d/${LINUX}.firmware doesn't exist or is not readable"
fi

################################################################################
# initscript ###################################################################
################################################################################

install -D -m755 /usr/lib/initramfs/initramfs "${BASE}"/init

################################################################################
# initramfs ####################################################################
################################################################################

cd "${BASE}"

umask 077
find . | cpio -o -H newc | gzip > "../initramfs-${LINUX}.cpio.gz"
umask 022

cd ..

for DESTINATION in ${INITRAMFS_DESTINATION}; do
  if [ -d "${DESTINATION}" ]; then
    install -D -m700 "initramfs-${LINUX}.cpio.gz" "${DESTINATION}"/"initramfs-${LINUX}.cpio.gz"
  else
    echo "error: directory ${DESTINATION} doesn't exist"
  fi
done

rm -f "initramfs-${LINUX}.cpio.gz"
rm -rf "${BASE}"

echo "generation done"

trap - INT TERM EXIT

exit 0
